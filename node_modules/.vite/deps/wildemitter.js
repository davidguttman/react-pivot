import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/wildemitter/wildemitter.js
var require_wildemitter = __commonJS({
  "node_modules/wildemitter/wildemitter.js"(exports, module) {
    module.exports = WildEmitter;
    function WildEmitter() {
    }
    WildEmitter.mixin = function(constructor) {
      var prototype = constructor.prototype || constructor;
      prototype.isWildEmitter = true;
      prototype.on = function(event, groupName, fn) {
        this.callbacks = this.callbacks || {};
        var hasGroup = arguments.length === 3, group = hasGroup ? arguments[1] : void 0, func = hasGroup ? arguments[2] : arguments[1];
        func._groupName = group;
        (this.callbacks[event] = this.callbacks[event] || []).push(func);
        return this;
      };
      prototype.once = function(event, groupName, fn) {
        var self = this, hasGroup = arguments.length === 3, group = hasGroup ? arguments[1] : void 0, func = hasGroup ? arguments[2] : arguments[1];
        function on() {
          self.off(event, on);
          func.apply(this, arguments);
        }
        this.on(event, group, on);
        return this;
      };
      prototype.releaseGroup = function(groupName) {
        this.callbacks = this.callbacks || {};
        var item, i, len, handlers;
        for (item in this.callbacks) {
          handlers = this.callbacks[item];
          for (i = 0, len = handlers.length; i < len; i++) {
            if (handlers[i]._groupName === groupName) {
              handlers.splice(i, 1);
              i--;
              len--;
            }
          }
        }
        return this;
      };
      prototype.off = function(event, fn) {
        this.callbacks = this.callbacks || {};
        var callbacks = this.callbacks[event], i;
        if (!callbacks) return this;
        if (arguments.length === 1) {
          delete this.callbacks[event];
          return this;
        }
        i = callbacks.indexOf(fn);
        callbacks.splice(i, 1);
        if (callbacks.length === 0) {
          delete this.callbacks[event];
        }
        return this;
      };
      prototype.emit = function(event) {
        this.callbacks = this.callbacks || {};
        var args = [].slice.call(arguments, 1), callbacks = this.callbacks[event], specialCallbacks = this.getWildcardCallbacks(event), i, len, item, listeners;
        if (callbacks) {
          listeners = callbacks.slice();
          for (i = 0, len = listeners.length; i < len; ++i) {
            if (!listeners[i]) {
              break;
            }
            listeners[i].apply(this, args);
          }
        }
        if (specialCallbacks) {
          len = specialCallbacks.length;
          listeners = specialCallbacks.slice();
          for (i = 0, len = listeners.length; i < len; ++i) {
            if (!listeners[i]) {
              break;
            }
            listeners[i].apply(this, [event].concat(args));
          }
        }
        return this;
      };
      prototype.getWildcardCallbacks = function(eventName) {
        this.callbacks = this.callbacks || {};
        var item, split, result = [];
        for (item in this.callbacks) {
          split = item.split("*");
          if (item === "*" || split.length === 2 && eventName.slice(0, split[0].length) === split[0]) {
            result = result.concat(this.callbacks[item]);
          }
        }
        return result;
      };
    };
    WildEmitter.mixin(WildEmitter);
  }
});
export default require_wildemitter();
//# sourceMappingURL=wildemitter.js.map
